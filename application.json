{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Parameters":{
      "vpccidrblock":{
         "Description":"cidrBlock for VPC",
         "Type":"String"
      },
      "subnetcidrblock":{
         "Description":"cidrBlock for subnet",
         "Type":"String"
      },
      "AWSRegion":{
         "Description":"AWS Region for the stack",
         "Type":"String"
      },
      "VPCName":{
         "Description":"VPC Name",
         "Type":"String"
      },
      "internetGateway":{
         "Description":"Internet Gateway",
         "Type":"String",
         "Default":"myInternetGateway"
      },
      "routeTable":{
         "Description":"Route Table",
         "Type":"String",
         "Default":"myRouteTable"
      },
      "subnet1":{
         "Description":"Subnet for VPC",
         "Type":"String",
         "Default":"mySubnet1"
      },
      "subnet2":{
         "Description":"Subnet for VPC",
         "Type":"String",
         "Default":"mySubnet2"
      },
      "subnet3":{
         "Description":"Subnet for VPC",
         "Type":"String",
         "Default":"mySubnet3"
      },
      "AMI":{
         "Description":"AMI ID/Name for EC2",
         "Type":"String"
      },
      "keyname":{
         "Description":"KeyName for the EC2",
         "Type":"String"
      },
      "APPNAME":{
         "Description":"Web Application Name",
         "Type":"String",
         "Default":"csye6225-webapp"
      },
      "DEPGROUPNAME":{
         "Description":"Code Deploy Group Name",
         "Type":"String",
         "Default":"csye6225-webapp-deployment"
      },
      "myBucketNameForWebApp":{
         "Description":"Bucket name for storing application",
         "Type":"String",
         "Default":"codedeploy.rajsankhe.me"
      },
      "ec2InstanceType":{
         "Description":"InstanceType for EC2",
         "Type":"String",
         "Default":"t2.micro"
      },
      "myEC2Name":{
         "Description":"EC2 Name",
         "Type":"String",
         "Default":"myEC2Server"
      },
      "dbSecurityGroup":{
         "Description":"Database Security Group Name",
         "Type":"String",
         "Default":"csye6225-database-securitygroup"
      },
      "appSecurityGroup":{
         "Description":"Application Security Group Name",
         "Type":"String",
         "Default":"csye6225-application-securitygroup"
      },
      "dbName":{
         "Description":"RDS Database Name",
         "Type":"String",
         "Default":"csye6225"
      },
      "dbUserName":{
         "Description":"RDS DB User Name",
         "Type":"String",
         "Default":"dbuser"
      },
      "dbuserPassword":{
         "Description":"RDS DB UserPassword",
         "Type":"String",
         "Default":"dbuserPassword"
      },
      "dbIdentifier":{
         "Description":"RDS Name Identifier",
         "Type":"String",
         "Default":"csye6225-spring2020"
      },
      "HostedZoneId":{
         "Type":"String",
         "Default":"Z30W962Y6PIFEO"
      },
      "DomainName":{
         "Type":"String",
         "Default":"prod.rajsankhe.me"
      },
      "VolumeSize":{
         "Type":"String",
         "Default":"20"
      },
      "SQSQueueName":{
         "Type":"String",
         "Default":"dueBillQueue"
      },
      "SNSTopicName":{
         "Type":"String",
         "Default":"dueBillTopic"
      },
      "CertificateArn":{
         "Type":"String"
      }
   },
   "Resources":{
      "myVPC":{
         "Type":"AWS::EC2::VPC",
         "Properties":{
            "CidrBlock":{
               "Ref":"vpccidrblock"
            },
            "EnableDnsSupport":"true",
            "EnableDnsHostnames":"true",
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"VPCName"
                  }
               }
            ]
         }
      },
      "myPublicSubnet1":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "AvailabilityZone":{
               "Fn::Select":[
                  0,
                  {
                     "Fn::GetAZs":{
                        "Ref":"AWSRegion"
                     }
                  }
               ]
            },
            "VpcId":{
               "Ref":"myVPC"
            },
            "CidrBlock":{
               "Fn::Select":[
                  0,
                  {
                     "Fn::Cidr":[
                        {
                           "Ref":"subnetcidrblock"
                        },
                        3,
                        14
                     ]
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "-",
                        [
                           {
                              "Ref":"subnet1"
                           },
                           {
                              "Ref":"VPCName"
                           },
                           {
                              "Ref":"AWSRegion"
                           }
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "myPublicSubnet2":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "AvailabilityZone":{
               "Fn::Select":[
                  1,
                  {
                     "Fn::GetAZs":{
                        "Ref":"AWSRegion"
                     }
                  }
               ]
            },
            "VpcId":{
               "Ref":"myVPC"
            },
            "CidrBlock":{
               "Fn::Select":[
                  1,
                  {
                     "Fn::Cidr":[
                        {
                           "Ref":"subnetcidrblock"
                        },
                        3,
                        14
                     ]
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "-",
                        [
                           {
                              "Ref":"subnet2"
                           },
                           {
                              "Ref":"VPCName"
                           },
                           {
                              "Ref":"AWSRegion"
                           }
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "myPublicSubnet3":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "AvailabilityZone":{
               "Fn::Select":[
                  2,
                  {
                     "Fn::GetAZs":{
                        "Ref":"AWSRegion"
                     }
                  }
               ]
            },
            "VpcId":{
               "Ref":"myVPC"
            },
            "CidrBlock":{
               "Fn::Select":[
                  2,
                  {
                     "Fn::Cidr":[
                        {
                           "Ref":"subnetcidrblock"
                        },
                        3,
                        14
                     ]
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "-",
                        [
                           {
                              "Ref":"subnet3"
                           },
                           {
                              "Ref":"VPCName"
                           },
                           {
                              "Ref":"AWSRegion"
                           }
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "myInternetGateway":{
         "Type":"AWS::EC2::InternetGateway",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "-",
                        [
                           {
                              "Ref":"internetGateway"
                           },
                           {
                              "Ref":"VPCName"
                           },
                           {
                              "Ref":"AWSRegion"
                           }
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "VPCGatewayAttachment":{
         "Type":"AWS::EC2::VPCGatewayAttachment",
         "Properties":{
            "VpcId":{
               "Ref":"myVPC"
            },
            "InternetGatewayId":{
               "Ref":"myInternetGateway"
            }
         }
      },
      "myRouteTable":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"myVPC"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        "-",
                        [
                           {
                              "Ref":"routeTable"
                           },
                           {
                              "Ref":"VPCName"
                           },
                           {
                              "Ref":"AWSRegion"
                           }
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "routeTableAssocSubnet1":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"myPublicSubnet1"
            },
            "RouteTableId":{
               "Ref":"myRouteTable"
            }
         }
      },
      "routeTableAssocSubnet2":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"myPublicSubnet2"
            },
            "RouteTableId":{
               "Ref":"myRouteTable"
            }
         }
      },
      "routeTableAssocSubnet3":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"myPublicSubnet3"
            },
            "RouteTableId":{
               "Ref":"myRouteTable"
            }
         }
      },
      "myRouteName":{
         "Type":"AWS::EC2::Route",
         "Properties":{
            "RouteTableId":{
               "Ref":"myRouteTable"
            },
            "DestinationCidrBlock":"0.0.0.0/0",
            "GatewayId":{
               "Ref":"myInternetGateway"
            }
         }
      },
      "applicationSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"Security group for EC2 server",
            "GroupName":"csye6225-securitygroup",
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":8080,
                  "ToPort":8080,
                  "SourceSecurityGroupId":{
                     "Fn::GetAtt":[
                        "loadbalancerSecurityGroup",
                        "GroupId"
                     ]
                  }
               }
            ],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"appSecurityGroup"
                  }
               }
            ],
            "VpcId":{
               "Ref":"myVPC"
            }
         }
      },
      "loadbalancerSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupName":"LoadBalancer-Security-Group",
            "GroupDescription":"Enable HTTPS via port 8080",
            "VpcId":{
               "Ref":"myVPC"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":80,
                  "ToPort":80,
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":443,
                  "ToPort":443,
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":8080,
                  "ToPort":8080,
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":22,
                  "ToPort":22,
                  "CidrIp":"0.0.0.0/0"
               }
            ]
         }
      },
      "databaseSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "GroupDescription":"SecurityGroup for RDS",
            "GroupName":"csye6225-database-securitygroup",
            "SecurityGroupIngress":[
               {
                  "Description":"tcp",
                  "FromPort":"5432",
                  "ToPort":"5432",
                  "IpProtocol":"TCP",
                  "SourceSecurityGroupId":{
                     "Ref":"applicationSecurityGroup"
                  }
               }
            ],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"dbSecurityGroup"
                  }
               }
            ],
            "VpcId":{
               "Ref":"myVPC"
            }
         }
      },
      "myS3Bucket":{
         "Type":"AWS::S3::Bucket",
         "Properties":{
            "AccessControl":"Private",
            "BucketEncryption":{
               "ServerSideEncryptionConfiguration":[
                  {
                     "ServerSideEncryptionByDefault":{
                        "SSEAlgorithm":"AES256"
                     }
                  }
               ]
            },
            "LifecycleConfiguration":{
               "Rules":[
                  {
                     "Id":"ShiftIn30Days",
                     "Status":"Enabled",
                     "Transition":{
                        "TransitionInDays":"30",
                        "StorageClass":"STANDARD_IA"
                     }
                  }
               ]
            }
         }
      },
      "CodeDeployEC2S3":{
         "Type":"AWS::IAM::ManagedPolicy",
         "Properties":{
            "ManagedPolicyName":"CodeDeploy-EC2-S3",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Action":[
                        "s3:Get*",
                        "s3:List*"
                     ],
                     "Effect":"Allow",
                     "Resource":[
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "arn:aws:s3:::",
                                 {
                                    "Ref":"myBucketNameForWebApp"
                                 },
                                 "/*"
                              ]
                           ]
                        }
                     ]
                  }
               ]
            }
         }
      },
      "AccessAttachmentToS3Bucket":{
         "Type":"AWS::IAM::ManagedPolicy",
         "Properties":{
            "ManagedPolicyName":"Access-Attachment-To-S3-Bucket",
            "Description":"Policy for uploading attachments into S3",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Action":[
                        "s3:Get*",
                        "s3:List*",
                        "s3:Delete*",
                        "s3:Put*"
                     ],
                     "Effect":"Allow",
                     "Resource":[
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "arn:aws:s3:::",
                                 {
                                    "Ref":"myS3Bucket"
                                 }
                              ]
                           ]
                        },
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "arn:aws:s3:::",
                                 {
                                    "Ref":"myS3Bucket"
                                 },
                                 "/*"
                              ]
                           ]
                        }
                     ]
                  }
               ]
            }
         }
      },
      "CodeDeployEC2ServiceRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "RoleName":"CodeDeployEC2ServiceRole",
            "ManagedPolicyArns":[
               {
                  "Ref":"CodeDeployEC2S3"
               },
               {
                  "Ref":"AccessAttachmentToS3Bucket"
               },
               "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
               "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
               "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
            ],
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            }
         }
      },
      "myEC2InstanceProfile":{
         "Type":"AWS::IAM::InstanceProfile",
         "Properties":{
            "Path":"/",
            "Roles":[
               {
                  "Ref":"CodeDeployEC2ServiceRole"
               }
            ]
         }
      },
      "circleciec2ami":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"circleci-ec2-ami",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "ec2:AttachVolume",
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:CopyImage",
                        "ec2:CreateImage",
                        "ec2:CreateKeypair",
                        "ec2:CreateSecurityGroup",
                        "ec2:CreateSnapshot",
                        "ec2:CreateTags",
                        "ec2:CreateVolume",
                        "ec2:DeleteKeyPair",
                        "ec2:DeleteSecurityGroup",
                        "ec2:DeleteSnapshot",
                        "ec2:DeleteVolume",
                        "ec2:DeregisterImage",
                        "ec2:DescribeImageAttribute",
                        "ec2:DescribeImages",
                        "ec2:DescribeInstances",
                        "ec2:DescribeInstanceStatus",
                        "ec2:DescribeRegions",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeSnapshots",
                        "ec2:DescribeSubnets",
                        "ec2:DescribeTags",
                        "ec2:DescribeVolumes",
                        "ec2:DetachVolume",
                        "ec2:GetPasswordData",
                        "ec2:ModifyImageAttribute",
                        "ec2:ModifyInstanceAttribute",
                        "ec2:ModifySnapshotAttribute",
                        "ec2:RegisterImage",
                        "ec2:RunInstances",
                        "ec2:StopInstances",
                        "ec2:TerminateInstances"
                     ],
                     "Resource":"*"
                  }
               ]
            },
            "Users":[
               "circleci"
            ]
         }
      },
      "CirlceCIUploadToS3":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"CirlceCI-Upload-To-S3",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "s3:Get*",
                        "s3:List*",
                        "s3:PutObject"
                     ],
                     "Resource":{
                        "Fn::Join":[
                           "",
                           [
                              "arn:aws:s3:::",
                              {
                                 "Ref":"myBucketNameForWebApp"
                              },
                              "/*"
                           ]
                        ]
                     }
                  }
               ]
            },
            "Users":[
               "circleci"
            ]
         }
      },
      "CirlceCICodeDeploy":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"CirlceCI-Code-Deploy",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "codedeploy:RegisterApplicationRevision",
                        "codedeploy:GetApplicationRevision"
                     ],
                     "Resource":[
                        {
                           "Fn::Join":[
                              ":",
                              [
                                 "arn:aws:codedeploy",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 {
                                    "Ref":"AWS::AccountId"
                                 },
                                 "application:csye6225-webapp"
                              ]
                           ]
                        }
                     ]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "codedeploy:CreateDeployment",
                        "codedeploy:GetDeployment"
                     ],
                     "Resource":[
                        "*"
                     ]
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "codedeploy:GetDeploymentConfig"
                     ],
                     "Resource":[
                        {
                           "Fn::Join":[
                              ":",
                              [
                                 "arn:aws:codedeploy",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 {
                                    "Ref":"AWS::AccountId"
                                 },
                                 "deploymentconfig",
                                 "CodeDeployDefault.OneAtATime"
                              ]
                           ]
                        },
                        {
                           "Fn::Join":[
                              ":",
                              [
                                 "arn:aws:codedeploy",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 {
                                    "Ref":"AWS::AccountId"
                                 },
                                 "deploymentconfig",
                                 "CodeDeployDefault.HalfAtATime"
                              ]
                           ]
                        },
                        {
                           "Fn::Join":[
                              ":",
                              [
                                 "arn:aws:codedeploy",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 {
                                    "Ref":"AWS::AccountId"
                                 },
                                 "deploymentconfig",
                                 "CodeDeployDefault.AllAtOnce"
                              ]
                           ]
                        }
                     ]
                  }
               ]
            },
            "Users":[
               "circleci"
            ]
         }
      },
      "CodeDeployServiceRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "ManagedPolicyArns":[
               "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
            ],
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "codedeploy.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "RoleName":"CodeDeployServiceRole"
         }
      },
      "WebappApplication":{
         "Type":"AWS::CodeDeploy::Application",
         "Properties":{
            "ApplicationName":{
               "Ref":"APPNAME"
            },
            "ComputePlatform":"Server"
         }
      },
      "WebappDeploymentGroup":{
         "Type":"AWS::CodeDeploy::DeploymentGroup",
         "DependsOn":"CodeDeployServiceRole",
         "Properties":{
            "ApplicationName":{
               "Ref":"WebappApplication"
            },
            "DeploymentGroupName":{
               "Ref":"DEPGROUPNAME"
            },
            "AutoScalingGroups":[
               {
                  "Ref":"WebServerGroup"
               }
            ],
            "LoadBalancerInfo":{
               "TargetGroupInfoList":[
                  {
                     "Name":{
                        "Fn::GetAtt":[
                           "TargetGroup",
                           "TargetGroupName"
                        ]
                     }
                  }
               ]
            },
            "DeploymentStyle":{
               "DeploymentType":"IN_PLACE",
               "DeploymentOption":"WITHOUT_TRAFFIC_CONTROL"
            },
            "DeploymentConfigName":"CodeDeployDefault.AllAtOnce",
            "Ec2TagFilters":[
               {
                  "Key":"Name",
                  "Value":"EC2Webapplication",
                  "Type":"KEY_AND_VALUE"
               }
            ],
            "AutoRollbackConfiguration":{
               "Enabled":"true",
               "Events":[
                  "DEPLOYMENT_FAILURE"
               ]
            },
            "ServiceRoleArn":{
               "Fn::GetAtt":[
                  "CodeDeployServiceRole",
                  "Arn"
               ]
            }
         }
      },
      "MyLoadBalancer":{
         "Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
         "Properties":{
            "IpAddressType":"ipv4",
            "SecurityGroups":[
               {
                  "Ref":"loadbalancerSecurityGroup"
               }
            ],
            "Subnets":[
               {
                  "Ref":"myPublicSubnet2"
               },
               {
                  "Ref":"myPublicSubnet3"
               }
            ],
            "Name":"MyLoadBalancer",
            "Scheme":"internet-facing",
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Loadbalancer"
               }
            ],
            "Type":"application"
         }
      },
      "LaunchConfiguration":{
         "Type":"AWS::AutoScaling::LaunchConfiguration",
         "Properties":{
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "#!/bin/bash \n",
                        "set -e -x \n",
                        "sudo echo export SPRING_PROFILE=dev>>/etc/profile.d/envvariable.sh \n",
                        "sudo echo DBCreationType=update >> /etc/profile.d/envvariable.sh \n",
                        "sudo echo export DBCreationType >> /etc/profile.d/envvariable.sh \n",
                        {
                           "Fn::Sub":"sudo echo DomainName=${DomainName} >> /etc/profile.d/envvariable.sh \n"
                        },
                        "sudo echo export DomainName >> /etc/profile.d/envvariable.sh \n",
                        {
                           "Fn::Sub":"sudo echo QueueName=${SQSQueueName} >> /etc/profile.d/envvariable.sh \n"
                        },
                        "sudo echo export QueueName >> /etc/profile.d/envvariable.sh \n",
                        {
                           "Fn::Sub":"sudo echo DB_USERNAME=${dbUserName} >> /etc/profile.d/envvariable.sh \n"
                        },
                        "sudo echo export DB_USERNAME >> /etc/profile.d/envvariable.sh \n",
                        {
                           "Fn::Sub":"sudo echo DB_PASSWORD=${dbuserPassword} >> /etc/profile.d/envvariable.sh \n"
                        },
                        "sudo echo export DB_PASSWORD >> /etc/profile.d/envvariable.sh \n",
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "echo export DB_ENDPOINT=",
                                 {
                                    "Fn::GetAtt":[
                                       "myRDS",
                                       "Endpoint.Address"
                                    ]
                                 },
                                 ">>/etc/profile.d/envvariable.sh \n"
                              ]
                           ]
                        },
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "sudo echo WEBAPP_BUCKETNAME=",
                                 {
                                    "Ref":"myS3Bucket"
                                 },
                                 ">> /etc/profile.d/envvariable.sh \n"
                              ]
                           ]
                        },
                        {
                           "Fn::Join":[
                              "",
                              [
                                 "sudo echo export SNS_DUEBIllTOPIC=",
                                 {
                                    "Ref":"mySNSTopic"
                                 },
                                 ">>/etc/profile.d/envvariable.sh"
                              ]
                           ]
                        },
                        "sudo echo export DB_ENDPOINT >> /etc/profile.d/envvariable.sh \n",
                        "sudo echo export WEBAPP_BUCKETNAME >> /etc/profile.d/envvariable.sh \n"
                     ]
                  ]
               }
            },
            "ImageId":{
               "Ref":"AMI"
            },
            "KeyName":{
               "Ref":"keyname"
            },
            "SecurityGroups":[
               {
                  "Ref":"applicationSecurityGroup"
               }
            ],
            "LaunchConfigurationName":"LaunchConfiguration",
            "InstanceType":"t2.micro",
            "AssociatePublicIpAddress":true,
            "BlockDeviceMappings":[
               {
                  "DeviceName":"/dev/sdm",
                  "Ebs":{
                     "VolumeType":"gp2",
                     "DeleteOnTermination":"true",
                     "VolumeSize":{
                        "Ref":"VolumeSize"
                     }
                  }
               }
            ],
            "IamInstanceProfile":{
               "Ref":"myEC2InstanceProfile"
            }
         }
      },
      "TargetGroup":{
         "Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
         "Properties":{
            "HealthCheckIntervalSeconds":30,
            "HealthCheckPath":"/",
            "HealthCheckPort":"8080",
            "HealthCheckProtocol":"HTTP",
            "HealthCheckTimeoutSeconds":7,
            "HealthyThresholdCount":3,
            "Name":"TargetGroup",
            "Port":8080,
            "Protocol":"HTTP",
            "TargetType":"instance",
            "UnhealthyThresholdCount":5,
            "VpcId":{
               "Ref":"myVPC"
            },
            "Matcher":{
               "HttpCode":"401"
            }
         }
      },
      "WebServerGroup":{
         "Type":"AWS::AutoScaling::AutoScalingGroup",
         "Properties":{
            "LaunchConfigurationName":{
               "Ref":"LaunchConfiguration"
            },
            "MinSize":"2",
            "MaxSize":"5",
            "TargetGroupARNs":[
               {
                  "Ref":"TargetGroup"
               }
            ],
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"EC2Webapplication",
                  "PropagateAtLaunch":"True"
               }
            ],
            "DesiredCapacity":"2",
            "Cooldown":"60",
            "VPCZoneIdentifier":[
               {
                  "Ref":"myPublicSubnet2"
               },
               {
                  "Ref":"myPublicSubnet3"
               }
            ]
         }
      },
      "WebServerScaleUpPolicy":{
         "Type":"AWS::AutoScaling::ScalingPolicy",
         "Properties":{
            "AdjustmentType":"ChangeInCapacity",
            "AutoScalingGroupName":{
               "Ref":"WebServerGroup"
            },
            "Cooldown":"60",
            "ScalingAdjustment":"1"
         }
      },
      "WebServerScaleDownPolicy":{
         "Type":"AWS::AutoScaling::ScalingPolicy",
         "Properties":{
            "AdjustmentType":"ChangeInCapacity",
            "AutoScalingGroupName":{
               "Ref":"WebServerGroup"
            },
            "Cooldown":"60",
            "ScalingAdjustment":"-1"
         }
      },
      "CPUAlarmHigh":{
         "Type":"AWS::CloudWatch::Alarm",
         "Properties":{
            "AlarmDescription":"Scale-up if CPU > 90% for 10 minutes",
            "MetricName":"CPUUtilization",
            "Namespace":"AWS/EC2",
            "Statistic":"Average",
            "Period":"300",
            "EvaluationPeriods":"2",
            "Threshold":"10",
            "AlarmActions":[
               {
                  "Ref":"WebServerScaleUpPolicy"
               }
            ],
            "Dimensions":[
               {
                  "Name":"AutoScalingGroupName",
                  "Value":{
                     "Ref":"WebServerGroup"
                  }
               }
            ],
            "ComparisonOperator":"GreaterThanThreshold"
         }
      },
      "CPUAlarmLow":{
         "Type":"AWS::CloudWatch::Alarm",
         "Properties":{
            "AlarmDescription":"Scale-down if CPU < 70% for 10 minutes",
            "MetricName":"CPUUtilization",
            "Namespace":"AWS/EC2",
            "Statistic":"Average",
            "Period":"300",
            "EvaluationPeriods":"2",
            "Threshold":"5",
            "AlarmActions":[
               {
                  "Ref":"WebServerScaleDownPolicy"
               }
            ],
            "Dimensions":[
               {
                  "Name":"AutoScalingGroupName",
                  "Value":{
                     "Ref":"WebServerGroup"
                  }
               }
            ],
            "ComparisonOperator":"LessThanThreshold"
         }
      },
      "DNSRecordSet":{
         "Type":"AWS::Route53::RecordSet",
         "Properties":{
            "Name":{
               "Ref":"DomainName"
            },
            "HostedZoneId":{
               "Ref":"HostedZoneId"
            },
            "AliasTarget":{
               "HostedZoneId":{
                  "Fn::GetAtt":[
                     "MyLoadBalancer",
                     "CanonicalHostedZoneID"
                  ]
               },
               "DNSName":{
                  "Fn::GetAtt":[
                     "MyLoadBalancer",
                     "DNSName"
                  ]
               }
            },
            "Type":"A"
         }
      },
      "HttpListener":{
         "Type":"AWS::ElasticLoadBalancingV2::Listener",
         "Properties":{
            "Certificates":[
               {
                  "CertificateArn":{
                     "Ref":"CertificateArn"
                  }
               }
            ],
            "DefaultActions":[
               {
                  "Type":"forward",
                  "TargetGroupArn":{
                     "Ref":"TargetGroup"
                  }
               }
            ],
            "LoadBalancerArn":{
               "Ref":"MyLoadBalancer"
            },
            "Port":443,
            "Protocol":"HTTPS"
         }
      },
      "myDBSubnetGroup":{
         "Type":"AWS::RDS::DBSubnetGroup",
         "Properties":{
            "DBSubnetGroupDescription":"DBSubnet Group for RDS",
            "SubnetIds":[
               {
                  "Ref":"myPublicSubnet1"
               },
               {
                  "Ref":"myPublicSubnet2"
               },
               {
                  "Ref":"myPublicSubnet3"
               }
            ]
         }
      },
      "myRDS":{
         "Type":"AWS::RDS::DBInstance",
         "Properties":{
            "Engine":"Postgres",
            "EngineVersion":"10.6",
            "DBInstanceClass":"db.t3.micro",
            "AllocatedStorage":"10",
            "MultiAZ":false,
            "StorageEncrypted":true,
            "DBInstanceIdentifier":{
               "Ref":"dbIdentifier"
            },
            "MasterUsername":{
               "Ref":"dbUserName"
            },
            "MasterUserPassword":{
               "Ref":"dbuserPassword"
            },
            "PubliclyAccessible":false,
            "DBName":{
               "Ref":"dbName"
            },
            "DBSubnetGroupName":{
               "Ref":"myDBSubnetGroup"
            },
            "VPCSecurityGroups":[
               {
                  "Ref":"databaseSecurityGroup"
               }
            ]
         }
      },
      "mySQSQueue":{
         "Type":"AWS::SQS::Queue",
         "Properties":{
            "QueueName":{
               "Ref":"SQSQueueName"
            }
         }
      },
      "mySNSTopic":{
         "Type":"AWS::SNS::Topic",
         "Properties":{
            "TopicName":{
               "Ref":"SNSTopicName"
            }
         }
      },
      "DynamoDB":{
         "Type":"AWS::DynamoDB::Table",
         "Properties":{
            "KeySchema":[
               {
                  "AttributeName":"EmailID",
                  "KeyType":"HASH"
               }
            ],
            "AttributeDefinitions":[
               {
                  "AttributeName":"EmailID",
                  "AttributeType":"S"
               }
            ],
            "ProvisionedThroughput":{
               "ReadCapacityUnits":"5",
               "WriteCapacityUnits":"5"
            },
            "TableName":"EmailTable",
            "TimeToLiveSpecification":{
               "AttributeName":"ExpirationTime",
               "Enabled":true
            }
         }
      },
      "DueBillsLambdaFunction":{
         "Type":"AWS::Lambda::Function",
         "Properties":{
            "Handler":"bill_due_mail.billDueMailSender",
            "Role":{
               "Fn::GetAtt":[
                  "LambdaExecutionRole",
                  "Arn"
               ]
            },
            "Code":{
               "S3Bucket":{
                  "Ref":"myBucketNameForWebApp"
               },
               "S3Key":"BillDue-lambda.zip"
            },
            "Runtime":"python3.7",
            "FunctionName":"dueBillSendEmail",
            "Environment":{
               "Variables":{
                  "DomainName":{
                     "Ref":"DomainName"
                  }
               }
            }
         }
      },
      "LambdaExecutionRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":"lambda.amazonaws.com"
                     },
                     "Action":"sts:AssumeRole"
                  }
               ]
            },
            "ManagedPolicyArns":[
               "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
               "arn:aws:iam::aws:policy/AmazonSESFullAccess",
               "arn:aws:iam::aws:policy/AmazonS3FullAccess",
               "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
            ],
            "RoleName":"LambdaExecutionRole"
         }
      },
      "DynamoDBPolicy":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"DynamoDBPolicy",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "dynamodb:BatchGetItem",
                        "dynamodb:GetItem",
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:BatchWriteItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem"
                     ],
                     "Resource":"*"
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"LambdaExecutionRole"
               }
            ]
         }
      },
      "LambdaResourcePermission":{
         "Type":"AWS::Lambda::Permission",
         "Properties":{
            "FunctionName":{
               "Ref":"DueBillsLambdaFunction"
            },
            "Principal":"sns.amazonaws.com",
            "Action":"lambda:InvokeFunction",
            "SourceArn":{
               "Ref":"mySNSTopic"
            }
         }
      },
      "LambdaSNSSubscription":{
         "Type":"AWS::SNS::Subscription",
         "DependsOn":[
            "DueBillsLambdaFunction"
         ],
         "Properties":{
            "Endpoint":{
               "Fn::GetAtt":[
                  "DueBillsLambdaFunction",
                  "Arn"
               ]
            },
            "Protocol":"lambda",
            "TopicArn":{
               "Ref":"mySNSTopic"
            }
         }
      },
      "CirlceCILambdaPolicy":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"CirlceCILambdaPolicy",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "lambda:*",
                        "iam:PassRole"
                     ],
                     "Resource":"*"
                  }
               ]
            },
            "Users":[
               "circleci"
            ]
         }
      },
      "CirlceCILambdaS3Policy":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"CirlceCILambdaS3Policy",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "s3:GetObject"
                     ],
                     "Resource":{
                        "Fn::Join":[
                           "",
                           [
                              "arn:aws:s3:::",
                              {
                                 "Ref":"myBucketNameForWebApp"
                              },
                              "/*"
                           ]
                        ]
                     }
                  }
               ]
            },
            "Users":[
               "circleci"
            ]
         }
      }
   },
   "Outputs":{
      "myVPC":{
         "Description":"VPC Created",
         "Value":{
            "Ref":"myVPC"
         }
      },
      "myPublicSubnet1":{
         "Description":"public Subnet 1 ID",
         "Value":{
            "Ref":"myPublicSubnet1"
         }
      },
      "myPublicSubnet2":{
         "Description":"public Subnet 2 ID",
         "Value":{
            "Ref":"myPublicSubnet2"
         }
      },
      "myPublicSubnet3":{
         "Description":"public Subnet 3 ID",
         "Value":{
            "Ref":"myPublicSubnet3"
         }
      },
      "QueueURL":{
         "Description":"URL of new Amazon SQS Queue",
         "Value":{
            "Ref":"mySQSQueue"
         }
      },
      "QueueARN":{
         "Description":"ARN of new Amazon SQS Queue",
         "Value":{
            "Fn::GetAtt":[
               "mySQSQueue",
               "Arn"
            ]
         }
      },
      "QueueName":{
         "Description":"Name new Amazon SQS Queue",
         "Value":{
            "Fn::GetAtt":[
               "mySQSQueue",
               "QueueName"
            ]
         }
      }
   }
}